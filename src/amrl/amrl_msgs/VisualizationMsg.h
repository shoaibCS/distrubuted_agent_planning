/* Auto-generated by genmsg_cpp for file /home/olegzilm/GoogleDrive/UT/code/Autonomous_Robots_CS393/amrl_libraries/amrl_msgs/msg/VisualizationMsg.msg */
#ifndef AMRL_MSGS_MESSAGE_VISUALIZATIONMSG_H
#define AMRL_MSGS_MESSAGE_VISUALIZATIONMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "amrl_msgs/Pose2Df.h"
#include "amrl_msgs/PathVisualization.h"
#include "amrl_msgs/ColoredPoint2D.h"
#include "amrl_msgs/ColoredLine2D.h"
#include "amrl_msgs/ColoredArc2D.h"

namespace amrl_msgs
{
template <class ContainerAllocator>
struct VisualizationMsg_ {
  typedef VisualizationMsg_<ContainerAllocator> Type;

  VisualizationMsg_()
  : header()
  , ns()
  , particles()
  , path_options()
  , points()
  , lines()
  , arcs()
  {
  }

  VisualizationMsg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , ns(_alloc)
  , particles(_alloc)
  , path_options(_alloc)
  , points(_alloc)
  , lines(_alloc)
  , arcs(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ns_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ns;

  typedef std::vector< ::amrl_msgs::Pose2Df_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::Pose2Df_<ContainerAllocator> >::other >  _particles_type;
  std::vector< ::amrl_msgs::Pose2Df_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::Pose2Df_<ContainerAllocator> >::other >  particles;

  typedef std::vector< ::amrl_msgs::PathVisualization_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::PathVisualization_<ContainerAllocator> >::other >  _path_options_type;
  std::vector< ::amrl_msgs::PathVisualization_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::PathVisualization_<ContainerAllocator> >::other >  path_options;

  typedef std::vector< ::amrl_msgs::ColoredPoint2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::ColoredPoint2D_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::amrl_msgs::ColoredPoint2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::ColoredPoint2D_<ContainerAllocator> >::other >  points;

  typedef std::vector< ::amrl_msgs::ColoredLine2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::ColoredLine2D_<ContainerAllocator> >::other >  _lines_type;
  std::vector< ::amrl_msgs::ColoredLine2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::ColoredLine2D_<ContainerAllocator> >::other >  lines;

  typedef std::vector< ::amrl_msgs::ColoredArc2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::ColoredArc2D_<ContainerAllocator> >::other >  _arcs_type;
  std::vector< ::amrl_msgs::ColoredArc2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::amrl_msgs::ColoredArc2D_<ContainerAllocator> >::other >  arcs;


  typedef boost::shared_ptr< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::VisualizationMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct VisualizationMsg
typedef  ::amrl_msgs::VisualizationMsg_<std::allocator<void> > VisualizationMsg;

typedef boost::shared_ptr< ::amrl_msgs::VisualizationMsg> VisualizationMsgPtr;
typedef boost::shared_ptr< ::amrl_msgs::VisualizationMsg const> VisualizationMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::amrl_msgs::VisualizationMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::VisualizationMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "989408817adef9cc3922d1967821d49a";
  }

  static const char* value(const  ::amrl_msgs::VisualizationMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x989408817adef9ccULL;
  static const uint64_t static_value2 = 0x3922d1967821d49aULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/VisualizationMsg";
  }

  static const char* value(const  ::amrl_msgs::VisualizationMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Header header\n\
# Namespace\n\
string ns\n\
\n\
# Provided by particle filter\n\
Pose2Df[] particles\n\
\n\
# Provided by navigation\n\
# Assumes that the last one in the list is the best option.\n\
PathVisualization[] path_options\n\
\n\
# Generic visualization types.\n\
ColoredPoint2D[] points\n\
ColoredLine2D[] lines\n\
ColoredArc2D[] arcs\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: amrl_msgs/Pose2Df\n\
float32 x\n\
float32 y\n\
float32 theta\n\
================================================================================\n\
MSG: amrl_msgs/PathVisualization\n\
float32 curvature\n\
float32 distance\n\
float32 clearance\n\
================================================================================\n\
MSG: amrl_msgs/ColoredPoint2D\n\
Point2D point\n\
uint32 color\n\
================================================================================\n\
MSG: amrl_msgs/Point2D\n\
float32 x\n\
float32 y\n\
\n\
================================================================================\n\
MSG: amrl_msgs/ColoredLine2D\n\
Point2D p0\n\
Point2D p1\n\
uint32 color\n\
\n\
================================================================================\n\
MSG: amrl_msgs/ColoredArc2D\n\
# Circular arc section.\n\
Point2D center\n\
float32 radius\n\
float32 start_angle\n\
float32 end_angle\n\
uint32 color\n\
";
  }

  static const char* value(const  ::amrl_msgs::VisualizationMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::amrl_msgs::VisualizationMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.ns);
    stream.next(m.particles);
    stream.next(m.path_options);
    stream.next(m.points);
    stream.next(m.lines);
    stream.next(m.arcs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct VisualizationMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::VisualizationMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::amrl_msgs::VisualizationMsg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ns: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ns);
    s << indent << "particles[]" << std::endl;
    for (size_t i = 0; i < v.particles.size(); ++i)
    {
      s << indent << "  particles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amrl_msgs::Pose2Df_<ContainerAllocator> >::stream(s, indent + "    ", v.particles[i]);
    }
    s << indent << "path_options[]" << std::endl;
    for (size_t i = 0; i < v.path_options.size(); ++i)
    {
      s << indent << "  path_options[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amrl_msgs::PathVisualization_<ContainerAllocator> >::stream(s, indent + "    ", v.path_options[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amrl_msgs::ColoredPoint2D_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "lines[]" << std::endl;
    for (size_t i = 0; i < v.lines.size(); ++i)
    {
      s << indent << "  lines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amrl_msgs::ColoredLine2D_<ContainerAllocator> >::stream(s, indent + "    ", v.lines[i]);
    }
    s << indent << "arcs[]" << std::endl;
    for (size_t i = 0; i < v.arcs.size(); ++i)
    {
      s << indent << "  arcs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amrl_msgs::ColoredArc2D_<ContainerAllocator> >::stream(s, indent + "    ", v.arcs[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_VISUALIZATIONMSG_H

